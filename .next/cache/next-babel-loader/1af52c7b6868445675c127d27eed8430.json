{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport { fetchProductIdCartData, addCartData, updateCartData, removeCartData } from \"../apis/cart\";\nexport const onAddProductToCart = ({\n  product,\n  quantity = 1,\n  onSuccess,\n  onError,\n  getQuantityAvailable = () => true\n}) => {\n  fetchProductIdCartData(product.id).then(res => {\n    if (res.data.length === 0) {\n      if (product.quantity === 0) {\n        onError && onError(\"Reached maximum number of products\");\n        getQuantityAvailable && getQuantityAvailable(false);\n      } else {\n        addCartData(_objectSpread(_objectSpread({}, product), {}, {\n          id: uuidv4(),\n          productId: product.id,\n          cartQuantity: quantity\n        })).then(res => onSuccess && onSuccess(res)).catch(err => onError && onError(\"Add product to cart failed, please try again\", err));\n      }\n    } else {\n      let pData = res.data[0];\n\n      if (pData.cartQuantity + quantity > pData.quantity) {\n        onError && onError(\"Reached maximum number of products\");\n        getQuantityAvailable(false);\n      } else {\n        updateCartData(pData.id, {\n          cartQuantity: pData.cartQuantity + quantity\n        }).then(res => {\n          onSuccess && onSuccess(res);\n        }).catch(err => onError && onError(\"Add product to cart failed, please try again\", err));\n      }\n    }\n  }).catch(err => onError && onError(\"Add product to cart failed, please try again\", err));\n};\nexport const onRemoveProductFromCart = ({\n  cartId,\n  onSuccess,\n  onError\n}) => {\n  if (cartId && cartId !== \"\" && cartId !== null) {\n    removeCartData(cartId).then(res => onSuccess && onSuccess(res)).catch(err => onError && onError(\"Remove product failm, pleaser try again\", err));\n  }\n};\nexport const onChangeProductCartQuantity = ({\n  product,\n  quantity,\n  onSuccess\n}) => {\n  if (quantity > product.quantity || quantity < 1) {\n    return;\n  }\n\n  updateCartData(product.id, {\n    cartQuantity: quantity\n  }).then(res => onSuccess && onSuccess(res)).catch(err => console.log(err));\n};","map":null,"metadata":{},"sourceType":"module"}