{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport { fetchProductIdCartData, addCartData, updateCartData, removeCartData } from \"../apis/cart\";\nexport var onAddProductToCart = function onAddProductToCart(_ref) {\n  var product = _ref.product,\n      _ref$quantity = _ref.quantity,\n      quantity = _ref$quantity === void 0 ? 1 : _ref$quantity,\n      onSuccess = _ref.onSuccess,\n      onError = _ref.onError,\n      _ref$getQuantityAvail = _ref.getQuantityAvailable,\n      getQuantityAvailable = _ref$getQuantityAvail === void 0 ? function () {\n    return true;\n  } : _ref$getQuantityAvail;\n  fetchProductIdCartData(product.id).then(function (res) {\n    if (res.data.length === 0) {\n      if (product.quantity === 0) {\n        onError && onError(\"Reached maximum number of products\");\n        getQuantityAvailable && getQuantityAvailable(false);\n      } else {\n        addCartData(_objectSpread(_objectSpread({}, product), {}, {\n          id: uuidv4(),\n          productId: product.id,\n          cartQuantity: quantity\n        })).then(function (res) {\n          return onSuccess && onSuccess(res);\n        })[\"catch\"](function (err) {\n          return onError && onError(\"Add product to cart failed, please try again\", err);\n        });\n      }\n    } else {\n      var pData = res.data[0];\n\n      if (pData.cartQuantity + quantity > pData.quantity) {\n        onError && onError(\"Reached maximum number of products\");\n        getQuantityAvailable(false);\n      } else {\n        updateCartData(pData.id, {\n          cartQuantity: pData.cartQuantity + quantity\n        }).then(function (res) {\n          onSuccess && onSuccess(res);\n        })[\"catch\"](function (err) {\n          return onError && onError(\"Add product to cart failed, please try again\", err);\n        });\n      }\n    }\n  })[\"catch\"](function (err) {\n    return onError && onError(\"Add product to cart failed, please try again\", err);\n  });\n};\nexport var onRemoveProductFromCart = function onRemoveProductFromCart(_ref2) {\n  var cartId = _ref2.cartId,\n      onSuccess = _ref2.onSuccess,\n      onError = _ref2.onError;\n\n  if (cartId && cartId !== \"\" && cartId !== null) {\n    removeCartData(cartId).then(function (res) {\n      return onSuccess && onSuccess(res);\n    })[\"catch\"](function (err) {\n      return onError && onError(\"Remove product failm, pleaser try again\", err);\n    });\n  }\n};\nexport var onChangeProductCartQuantity = function onChangeProductCartQuantity(_ref3) {\n  var product = _ref3.product,\n      quantity = _ref3.quantity,\n      onSuccess = _ref3.onSuccess;\n\n  if (quantity > product.quantity || quantity < 1) {\n    return;\n  }\n\n  updateCartData(product.id, {\n    cartQuantity: quantity\n  }).then(function (res) {\n    return onSuccess && onSuccess(res);\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};","map":null,"metadata":{},"sourceType":"module"}