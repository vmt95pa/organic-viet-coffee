{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport { fetchProductIdCartData, addCartData, updateCartData, removeCartData } from \"../apis/cart\";\nexport const onAddProductToCart = ({\n  product,\n  quantity = 1,\n  onSuccess,\n  onError,\n  getQuantityAvailable = () => true\n}) => {\n  fetchProductIdCartData(product.id).then(res => {\n    if (res.data.length === 0) {\n      if (product.quantity === 0) {\n        onError && onError(\"Reached maximum number of products\");\n        getQuantityAvailable && getQuantityAvailable(false);\n      } else {\n        addCartData(_objectSpread(_objectSpread({}, product), {}, {\n          id: uuidv4(),\n          productId: product.id,\n          cartQuantity: quantity\n        })).then(res => onSuccess && onSuccess(res)).catch(err => onError && onError(\"Add product to cart failed, please try again\", err));\n      }\n    } else {\n      let pData = res.data[0];\n\n      if (pData.cartQuantity + quantity > pData.quantity) {\n        onError && onError(\"Reached maximum number of products\");\n        getQuantityAvailable(false);\n      } else {\n        updateCartData(pData.id, {\n          cartQuantity: pData.cartQuantity + quantity\n        }).then(res => {\n          onSuccess && onSuccess(res);\n        }).catch(err => onError && onError(\"Add product to cart failed, please try again\", err));\n      }\n    }\n  }).catch(err => onError && onError(\"Add product to cart failed, please try again\", err));\n};\nexport const onRemoveProductFromCart = ({\n  cartId,\n  onSuccess,\n  onError\n}) => {\n  if (cartId && cartId !== \"\" && cartId !== null) {\n    removeCartData(cartId).then(res => onSuccess && onSuccess(res)).catch(err => onError && onError(\"Remove product failm, pleaser try again\", err));\n  }\n};\nexport const onChangeProductCartQuantity = ({\n  product,\n  quantity,\n  onSuccess\n}) => {\n  if (quantity > product.quantity || quantity < 1) {\n    return;\n  }\n\n  updateCartData(product.id, {\n    cartQuantity: quantity\n  }).then(res => onSuccess && onSuccess(res)).catch(err => console.log(err));\n};","map":{"version":3,"sources":["C:/Users/ADMIN/Desktop/ogami-main/ogami/src/common/cartServices.js"],"names":["v4","uuidv4","fetchProductIdCartData","addCartData","updateCartData","removeCartData","onAddProductToCart","product","quantity","onSuccess","onError","getQuantityAvailable","id","then","res","data","length","productId","cartQuantity","catch","err","pData","onRemoveProductFromCart","cartId","onChangeProductCartQuantity","console","log"],"mappings":";;;;;;AAAA,SAASA,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,SACEC,sBADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,cAJF,QAKO,cALP;AAOA,OAAO,MAAMC,kBAAkB,GAAG,CAAC;AACjCC,EAAAA,OADiC;AAEjCC,EAAAA,QAAQ,GAAG,CAFsB;AAGjCC,EAAAA,SAHiC;AAIjCC,EAAAA,OAJiC;AAKjCC,EAAAA,oBAAoB,GAAG,MAAM;AALI,CAAD,KAM5B;AACJT,EAAAA,sBAAsB,CAACK,OAAO,CAACK,EAAT,CAAtB,CACGC,IADH,CACSC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACC,IAAJ,CAASC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,UAAIT,OAAO,CAACC,QAAR,KAAqB,CAAzB,EAA4B;AAC1BE,QAAAA,OAAO,IAAIA,OAAO,CAAC,oCAAD,CAAlB;AACAC,QAAAA,oBAAoB,IAAIA,oBAAoB,CAAC,KAAD,CAA5C;AACD,OAHD,MAGO;AACLR,QAAAA,WAAW,iCACNI,OADM;AAETK,UAAAA,EAAE,EAAEX,MAAM,EAFD;AAGTgB,UAAAA,SAAS,EAAEV,OAAO,CAACK,EAHV;AAITM,UAAAA,YAAY,EAAEV;AAJL,WAAX,CAMGK,IANH,CAMSC,GAAD,IAASL,SAAS,IAAIA,SAAS,CAACK,GAAD,CANvC,EAOGK,KAPH,CAQKC,GAAD,IACEV,OAAO,IACPA,OAAO,CAAC,8CAAD,EAAiDU,GAAjD,CAVb;AAYD;AACF,KAlBD,MAkBO;AACL,UAAIC,KAAK,GAAGP,GAAG,CAACC,IAAJ,CAAS,CAAT,CAAZ;;AACA,UAAIM,KAAK,CAACH,YAAN,GAAqBV,QAArB,GAAgCa,KAAK,CAACb,QAA1C,EAAoD;AAClDE,QAAAA,OAAO,IAAIA,OAAO,CAAC,oCAAD,CAAlB;AACAC,QAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD,OAHD,MAGO;AACLP,QAAAA,cAAc,CAACiB,KAAK,CAACT,EAAP,EAAW;AACvBM,UAAAA,YAAY,EAAEG,KAAK,CAACH,YAAN,GAAqBV;AADZ,SAAX,CAAd,CAGGK,IAHH,CAGSC,GAAD,IAAS;AACbL,UAAAA,SAAS,IAAIA,SAAS,CAACK,GAAD,CAAtB;AACD,SALH,EAMGK,KANH,CAOKC,GAAD,IACEV,OAAO,IACPA,OAAO,CAAC,8CAAD,EAAiDU,GAAjD,CATb;AAWD;AACF;AACF,GAvCH,EAwCGD,KAxCH,CAyCKC,GAAD,IACEV,OAAO,IAAIA,OAAO,CAAC,8CAAD,EAAiDU,GAAjD,CA1CxB;AA4CD,CAnDM;AAqDP,OAAO,MAAME,uBAAuB,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUd,EAAAA,SAAV;AAAqBC,EAAAA;AAArB,CAAD,KAAoC;AACzE,MAAIa,MAAM,IAAIA,MAAM,KAAK,EAArB,IAA2BA,MAAM,KAAK,IAA1C,EAAgD;AAC9ClB,IAAAA,cAAc,CAACkB,MAAD,CAAd,CACGV,IADH,CACSC,GAAD,IAASL,SAAS,IAAIA,SAAS,CAACK,GAAD,CADvC,EAEGK,KAFH,CAGKC,GAAD,IACEV,OAAO,IAAIA,OAAO,CAAC,yCAAD,EAA4CU,GAA5C,CAJxB;AAMD;AACF,CATM;AAWP,OAAO,MAAMI,2BAA2B,GAAG,CAAC;AAC1CjB,EAAAA,OAD0C;AAE1CC,EAAAA,QAF0C;AAG1CC,EAAAA;AAH0C,CAAD,KAIrC;AACJ,MAAID,QAAQ,GAAGD,OAAO,CAACC,QAAnB,IAA+BA,QAAQ,GAAG,CAA9C,EAAiD;AAC/C;AACD;;AACDJ,EAAAA,cAAc,CAACG,OAAO,CAACK,EAAT,EAAa;AAAEM,IAAAA,YAAY,EAAEV;AAAhB,GAAb,CAAd,CACGK,IADH,CACSC,GAAD,IAASL,SAAS,IAAIA,SAAS,CAACK,GAAD,CADvC,EAEGK,KAFH,CAEUC,GAAD,IAASK,OAAO,CAACC,GAAR,CAAYN,GAAZ,CAFlB;AAGD,CAXM","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\nimport {\n  fetchProductIdCartData,\n  addCartData,\n  updateCartData,\n  removeCartData,\n} from \"../apis/cart\";\n\nexport const onAddProductToCart = ({\n  product,\n  quantity = 1,\n  onSuccess,\n  onError,\n  getQuantityAvailable = () => true,\n}) => {\n  fetchProductIdCartData(product.id)\n    .then((res) => {\n      if (res.data.length === 0) {\n        if (product.quantity === 0) {\n          onError && onError(\"Reached maximum number of products\");\n          getQuantityAvailable && getQuantityAvailable(false);\n        } else {\n          addCartData({\n            ...product,\n            id: uuidv4(),\n            productId: product.id,\n            cartQuantity: quantity,\n          })\n            .then((res) => onSuccess && onSuccess(res))\n            .catch(\n              (err) =>\n                onError &&\n                onError(\"Add product to cart failed, please try again\", err)\n            );\n        }\n      } else {\n        let pData = res.data[0];\n        if (pData.cartQuantity + quantity > pData.quantity) {\n          onError && onError(\"Reached maximum number of products\");\n          getQuantityAvailable(false);\n        } else {\n          updateCartData(pData.id, {\n            cartQuantity: pData.cartQuantity + quantity,\n          })\n            .then((res) => {\n              onSuccess && onSuccess(res);\n            })\n            .catch(\n              (err) =>\n                onError &&\n                onError(\"Add product to cart failed, please try again\", err)\n            );\n        }\n      }\n    })\n    .catch(\n      (err) =>\n        onError && onError(\"Add product to cart failed, please try again\", err)\n    );\n};\n\nexport const onRemoveProductFromCart = ({ cartId, onSuccess, onError }) => {\n  if (cartId && cartId !== \"\" && cartId !== null) {\n    removeCartData(cartId)\n      .then((res) => onSuccess && onSuccess(res))\n      .catch(\n        (err) =>\n          onError && onError(\"Remove product failm, pleaser try again\", err)\n      );\n  }\n};\n\nexport const onChangeProductCartQuantity = ({\n  product,\n  quantity,\n  onSuccess,\n}) => {\n  if (quantity > product.quantity || quantity < 1) {\n    return;\n  }\n  updateCartData(product.id, { cartQuantity: quantity })\n    .then((res) => onSuccess && onSuccess(res))\n    .catch((err) => console.log(err));\n};\n"]},"metadata":{},"sourceType":"module"}