{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { BLOG } from \"../actionTypes\";\nconst initialState = {\n  allPosts: {\n    loading: true,\n    data: [],\n    error: false,\n    count: 0\n  },\n  recentPosts: {\n    loading: true,\n    data: [],\n    error: false\n  },\n  postDetail: {\n    loading: true,\n    data: [],\n    error: false\n  }\n};\nexport default function blogReducer(state = initialState, action) {\n  switch (action.type) {\n    //All posts\n    case BLOG.FETCH_POSTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: {\n          loading: true,\n          data: [],\n          error: false\n        }\n      });\n\n    case BLOG.FETCH_POSTS_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: _objectSpread(_objectSpread({}, state.allPosts), {}, {\n          loading: false,\n          data: action.payload.data,\n          count: action.payload.postCount\n        })\n      });\n\n    case BLOG.FETCH_POSTS_FAIL:\n      // let { err } = action.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: _objectSpread(_objectSpread({}, state.allPosts), {}, {\n          loading: false,\n          error: true\n        })\n      });\n    //Recent posts\n\n    case BLOG.FETCH_RECENT_POSTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        recentPosts: {\n          loading: true,\n          data: [],\n          error: false\n        }\n      });\n\n    case BLOG.FETCH_RECENT_POSTS_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        recentPosts: _objectSpread(_objectSpread({}, state.recentPosts), {}, {\n          loading: false,\n          data: action.payload.data,\n          count: action.payload.postCount\n        })\n      });\n\n    case BLOG.FETCH_RECENT_POSTS_FAIL:\n      // let { err } = action.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        recentPosts: _objectSpread(_objectSpread({}, state.recentPosts), {}, {\n          loading: false,\n          error: true\n        })\n      });\n    //Post detail\n\n    case BLOG.FETCH_POST_DETAIL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        postDetail: {\n          loading: true,\n          data: [],\n          error: false\n        }\n      });\n\n    case BLOG.FETCH_POST_DETAIL_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        postDetail: _objectSpread(_objectSpread({}, state.postDetail), {}, {\n          loading: false,\n          data: action.payload.data\n        })\n      });\n\n    case BLOG.FETCH_POST_DETAIL_FAIL:\n      // let { err } = action.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        postDetail: _objectSpread(_objectSpread({}, state.postDetail), {}, {\n          loading: false,\n          error: true\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/ADMIN/Desktop/ogami-main/ogami/src/redux/reducers/blogReducer.js"],"names":["BLOG","initialState","allPosts","loading","data","error","count","recentPosts","postDetail","blogReducer","state","action","type","FETCH_POSTS","FETCH_POSTS_SUCCESS","payload","postCount","FETCH_POSTS_FAIL","FETCH_RECENT_POSTS","FETCH_RECENT_POSTS_SUCCESS","FETCH_RECENT_POSTS_FAIL","FETCH_POST_DETAIL","FETCH_POST_DETAIL_SUCCESS","FETCH_POST_DETAIL_FAIL"],"mappings":"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","sourcesContent":["import { BLOG } from \"../actionTypes\";\n\nconst initialState = {\n  allPosts: { loading: true, data: [], error: false, count: 0 },\n  recentPosts: { loading: true, data: [], error: false },\n  postDetail: { loading: true, data: [], error: false },\n};\n\nexport default function blogReducer(state = initialState, action) {\n  switch (action.type) {\n    //All posts\n    case BLOG.FETCH_POSTS:\n      return {\n        ...state,\n        allPosts: {\n          loading: true,\n          data: [],\n          error: false,\n        },\n      };\n    case BLOG.FETCH_POSTS_SUCCESS:\n      return {\n        ...state,\n        allPosts: {\n          ...state.allPosts,\n          loading: false,\n          data: action.payload.data,\n          count: action.payload.postCount,\n        },\n      };\n    case BLOG.FETCH_POSTS_FAIL:\n      // let { err } = action.payload;\n      return {\n        ...state,\n        allPosts: {\n          ...state.allPosts,\n          loading: false,\n          error: true,\n        },\n      };\n    //Recent posts\n    case BLOG.FETCH_RECENT_POSTS:\n      return {\n        ...state,\n        recentPosts: {\n          loading: true,\n          data: [],\n          error: false,\n        },\n      };\n    case BLOG.FETCH_RECENT_POSTS_SUCCESS:\n      return {\n        ...state,\n        recentPosts: {\n          ...state.recentPosts,\n          loading: false,\n          data: action.payload.data,\n          count: action.payload.postCount,\n        },\n      };\n    case BLOG.FETCH_RECENT_POSTS_FAIL:\n      // let { err } = action.payload;\n      return {\n        ...state,\n        recentPosts: {\n          ...state.recentPosts,\n          loading: false,\n          error: true,\n        },\n      };\n    //Post detail\n    case BLOG.FETCH_POST_DETAIL:\n      return {\n        ...state,\n        postDetail: { loading: true, data: [], error: false },\n      };\n    case BLOG.FETCH_POST_DETAIL_SUCCESS:\n      return {\n        ...state,\n        postDetail: {\n          ...state.postDetail,\n          loading: false,\n          data: action.payload.data,\n        },\n      };\n    case BLOG.FETCH_POST_DETAIL_FAIL:\n      // let { err } = action.payload;\n      return {\n        ...state,\n        postDetail: {\n          ...state.postDetail,\n          loading: false,\n          error: true,\n        },\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}